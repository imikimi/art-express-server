import &ArtStandardLib, &ArtCommunicationStatus
&colors

class Server extends &LoggingMixin &ArtClassSystem.BaseClass

  @defaults:
    port:   8085
    server: :http://localhost

  @start: (manyOptions...) ->
    new Server
    .start manyOptions...

  start: (manyOptions...) ->
    ##
      ENV:
        WEB_CONCURRENCY: number -> sets options.numWorkers
        PORT:            number -> sets options.port

      IN: options: one or more options objects, merged
        port:     (number) port to listen on

        static:   # if present, serve static assets
          root:   path to static assets to serve
          headers: {} # headers to return with every request

        handlers:
          single or array of objects that implement:

            getMiddleware: (options) -> express-use-function

          Example:
            class MyInfoHandler extends &PrimseHandler
              @getter handleUrlRegex: -> /// \/ info

              handleApiRequest: (request, requestData) ->
                info: "" Result from MyInfoHandler

            &ArtExpressServer.start handlers: MyInfoHandler

          NOTE: The final, merged options-object is passed into
            start is also passed to each getMiddleware() call.

        numWorkers: number
          if > 1, will spawn that many workers to handle requests

        allowAllCors: true
          If set, then headers and OPTIONS requests will be handled in such a way
          that ALL requests are accepted, regardless of CORS.

          This is the way the interenet should work. The problem is COOKIES.

          If your client uses COOKIES, then don't use this, but if you maintain your
          sessions some other way, it is safe to do.

          SEE: http://www.essenceandartifact.com/2017/01/why-cors-why.html

    {numWorkers} = @options = @_allowAllCors merge
        Server.defaults
        numWorkers:   process.env.WEB_CONCURRENCY || 1
        port:         process.env.PORT
        manyOptions...

    @logVerbose start: {}
      env:      object v, k from process.env when k.match /^art/
      Neptune: Neptune.getVersions()
      @options

    @log ArtExpressServer: {}
      @options
      process.env.WEB_CONCURRENCY
      process.env.WEB_MEMORY
      process.env.MEMORY_AVAILABLE
      process.env.PORT

    numWorkers = numWorkers | 0 if numWorkers?

    if numWorkers > 1
      @log start: throng: workers: numWorkers
      &throng numWorkers, fastBind @_startOneServer, @
    else
      @_startOneServer()

  ##################
  # PRIVATE
  ##################
  _allowAllCors: (options) ->
    if options.allowAllCors
      merge
        options
        commonResponseHeaders: merge
          &AllowAllCorsHandler.commonResponseHeaders
          options.commonResponseHeaders

        handlers: compactFlatten []
          &AllowAllCorsHandler
          options.handlers
    else options

  _startOneServer: (@workerId) ->

    {port, handlers, middleware, commonResponseHeaders} = @options
    staticOptions = @options.static

    app = &express()
    app.use &compression()

    each mw in if middleware is Array then middleware else [middleware]
      app.use mw

    each handler in if isArray handlers then handlers else [handlers]
      app.use handler.getMiddleware @options

    if staticOptions
      app.use &express.static staticOptions.root, merge
        maxAge:       3600 * 24 * 7 # 1 week
        setHeaders: (response, path) ->
          switch &path.extname(path).toLowerCase()
            when :.js then response.setHeader "Content-Type", "application/javascript; charset=UTF-8"

          each v, k from merge commonResponseHeaders, staticOptions.headers
            response.setHeader k, v
        staticOptions

    app.listen port | 0, =>
      @log "" listening on: http://localhost:#{port}
