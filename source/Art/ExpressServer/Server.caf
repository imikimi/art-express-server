import &ArtStandardLib, &ArtCommunicationStatus
&colors

class ExpressServer extends &LoggingMixin &ArtClassSystem.BaseClass

  @defaults:
    port:   8085
    server: :http://localhost

  @start: (manyOptions...) ->
    new ExpressServer
    .start manyOptions...

  start: (manyOptions...) ->
    ##
      IN: options: one or more options objects, merged
        port:     (number) port to listen on

        static:   # if present, serve static assets
          root:   path to static assets to serve
          headers: {} # headers to return with every request

        handlers: [getMiddleware()] -
          Array objects that implement 'getMiddleware(options)' which returns the value
          to pass to `express.use`.

          The merged options-object passed into start is passed to each getMiddleware call.

        allowAllCors: true
          If set, then headers and OPTIONS requests will be handled in such a way
          that ALL requests are accepted, regardless of CORS.

          This is the way the interenet should work. The problem is COOKIES.

          If your client uses COOKIES, then don't use this, but if you maintain your
          sessions some other way, it is safe to do.

          SEE: http://www.essenceandartifact.com/2017/01/why-cors-why.html

    {numWorkers} = @options = @_allowAllCors merge ExpressServer.defaults, manyOptions...

    @logVerbose start: {}
      env:      object v, k from process.env when k.match /^art/
      Neptune: Neptune.getVersions()
      @options

    if numWorkers > 1
      @log start: throng: workers: numWorkers
      &throng
        start:    fastBind @_startOneServer, @
        workers:  numWorkers
        lifetime: Infinity
    else
      @_startOneServer()

  ##################
  # PRIVATE
  ##################
  _allowAllCors: (options) ->
    if options.allowAllCors
      merge
        options
        commonResponseHeaders: merge
          &AllowAllCorsHandler.commonResponseHeaders
          options.commonResponseHeaders

        handlers: compactFlatten []
          &AllowAllCorsHandler
          options.handlers
    else options

  _startOneServer: ->

    {port, handlers, commonResponseHeaders} = @options
    staticOptions = @options.static

    app = &express()
    app.use &compression()

    each handler in if isArray handlers then handlers else [handlers]
      app.use handler.getMiddleware @options

    if staticOptions
      app.use &express.static staticOptions.root, merge
        maxAge:       3600 * 24 * 7 # 1 week
        setHeaders: (response) ->
          each v, k from merge commonResponseHeaders, staticOptions.headers
            response.setHeader k, v
        staticOptions

    app.listen port, =>
      @log "" listening on: http://localhost:#{port}
